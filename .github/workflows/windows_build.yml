name: Windows Build and Upload

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - uses: gcarreno/setup-lazarus@v3
      with:
        lazarus-version: "2.2.2"

    - name: Download Lazarus Installer
      run: |
        Invoke-WebRequest -Uri "https://zenlayer.dl.sourceforge.net/project/lazarus/Lazarus%20Windows%2064%20bits/Lazarus%202.2.2/lazarus-2.2.2-fpc-3.2.2-cross-i386-win32-win64.exe?viasf=1" -OutFile "lazarus-installer-i386.exe"
      shell: pwsh

    - name: Install Lazarus
      run: |
        .\lazarus-installer-i386.exe  /VERYSILENT /SP- /DIR=D:\a\_temp\installers\lazarus
      shell: pwsh

    - name: Replace Strings in Build Output
      run: |
        Get-ChildItem -Path "Cheat Engine" -Recurse -Include "*.lpi", "*.lua", "*.pps", "*.cpp", "*.po", ".pas" | ForEach-Object {
            $content = Get-Content $_.FullName -Raw
            $content = $content -replace """Cheat Engine 7.5""", """LLL ABX"""
            $content = $content -replace """Cheat Engine""", """XXX Abs"""
            $content = $content -replace "'Cheat Engine 7.5'", "'LLL ABX'"
            $content = $content -replace "'Cheat Engine'", "'XXX Abs'"
            Set-Content $_.FullName $content
        }

        Get-ChildItem -Path "Cheat Engine" -Recurse -Include "*.lfm", "*.lrt", "*.lpr", "*.dfm" | ForEach-Object {
            $content = Get-Content $_.FullName -Raw
            $content = $content -replace "Cheat Engine", "LLL ABX"
            $content = $content -replace "CheatEngine", "mnok2wndun"
            Set-Content $_.FullName $content
        }
      shell: pwsh
    
    - name: Build CheatEngine
      run: |
        C:\lazarus\lazbuild.exe "Cheat Engine/cheatengine.lpi" --build-mode="Release 64-Bit"
        C:\lazarus\lazbuild.exe "Cheat Engine/cheatengine.lpi" --build-mode="Release 32-Bit"
      shell: cmd

    - name: Replace Strings in Binaries
      run: |
        function Replace-Bytes {
            param (
                [byte[]]$Bytes,
                [byte[]]$OldBytes,
                [byte[]]$NewBytes
            )

            if ($OldBytes.Length -ne $NewBytes.Length) {
                throw "Old and new byte arrays must have the same length for in-place replacement."
            }

            $index = 0
            while ($true) {
                $found = $false
                for ($i = $index; $i -le ($Bytes.Length - $OldBytes.Length); $i++) {
                    $match = $true
                    for ($j = 0; $j -lt $OldBytes.Length; $j++) {
                        if ($Bytes[$i + $j] -ne $OldBytes[$j]) {
                            $match = $false
                            break
                        }
                    }
                    if ($match) {
                        
                        for ($k = 0; $k -lt $NewBytes.Length; $k++) {
                            $Bytes[$i + $k] = $NewBytes[$k]
                        }
                        $index = $i + $NewBytes.Length 
                        $found = $true
                        break
                    }
                }
                if (-not $found) {
                    break 
                }
            }
            return $Bytes
        }

        $filesToModify = @(
            "Cheat Engine/bin/cheatengine-x86_64.exe",
            "Cheat Engine/bin/cheatengine-i386.exe"
        )

        $oldString1 = [System.Text.Encoding]::ASCII.GetBytes("Cheat Engine") + 0
        $newString1 = [System.Text.Encoding]::ASCII.GetBytes("XXXXX YYYYYY") + 0

        $oldString2 = [System.Text.Encoding]::ASCII.GetBytes("CheatEngine") + 0
        $newString2 = [System.Text.Encoding]::ASCII.GetBytes("CCCCCCCCCCC") + 0

        foreach ($filePath in $filesToModify) {
            if (Test-Path $filePath) {
                $bytes = [System.IO.File]::ReadAllBytes($filePath)
                $bytes = Replace-Bytes -Bytes $bytes -OldBytes $oldString1 -NewBytes $newString1
                $bytes = Replace-Bytes -Bytes $bytes -OldBytes $oldString2 -NewBytes $newString2

                [System.IO.File]::WriteAllBytes($filePath, $bytes)
            } else {
                Write-Host "File not found: $filePath"
            }
        }
      shell: pwsh

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: CheatEngine-Windows-Build
        path: Cheat Engine/bin